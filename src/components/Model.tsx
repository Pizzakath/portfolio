/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useEffect, useRef } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
    nodes: {
        Vampire: THREE.SkinnedMesh;
        Hips: THREE.Bone;
    };
    materials: {
        Vampire_MAT: THREE.MeshStandardMaterial;
    };
};

type ActionName = 'coming';
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export default function Model({ ...props }: JSX.IntrinsicElements['group']) {
    const group = useRef<THREE.Group>();
    const { nodes, materials, animations } = useGLTF('/model.gltf') as GLTFResult;
    const { actions } = useAnimations<GLTFActions>(animations, group);
    useEffect(() => {
        actions.coming.play();
    });
    return (
        <group ref={group} {...props} dispose={null}>
            <group>
                <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
                    <primitive object={nodes.Hips} />
                    <skinnedMesh
                        geometry={nodes.Vampire.geometry}
                        material={materials.Vampire_MAT}
                        skeleton={nodes.Vampire.skeleton}
                    />
                </group>
            </group>
        </group>
    );
}

useGLTF.preload('/model.gltf');
