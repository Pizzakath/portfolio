/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useEffect, useRef, useState } from 'react';
import { useGLTF, useAnimations, Html, Sparkles } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useFrame } from '@react-three/fiber';
import lerp from 'lerp';
import Cam from '@/components/Cam';

type GLTFResult = GLTF & {
    nodes: {
        Wolf3D_Body: THREE.SkinnedMesh;
        Wolf3D_Hair: THREE.SkinnedMesh;
        Wolf3D_Outfit_Bottom: THREE.SkinnedMesh;
        Wolf3D_Outfit_Footwear: THREE.SkinnedMesh;
        Wolf3D_Outfit_Top: THREE.SkinnedMesh;
        EyeLeft: THREE.SkinnedMesh;
        EyeRight: THREE.SkinnedMesh;
        Wolf3D_Head: THREE.SkinnedMesh;
        Wolf3D_Teeth: THREE.SkinnedMesh;
        Hips: THREE.Bone;
    };
    materials: {
        Wolf3D_Body: THREE.MeshStandardMaterial;
        Wolf3D_Hair: THREE.MeshStandardMaterial;
        Wolf3D_Outfit_Bottom: THREE.MeshStandardMaterial;
        Wolf3D_Outfit_Footwear: THREE.MeshStandardMaterial;
        Wolf3D_Outfit_Top: THREE.MeshStandardMaterial;
        Wolf3D_Eye: THREE.MeshStandardMaterial;
        Wolf3D_Skin: THREE.MeshStandardMaterial;
        Wolf3D_Teeth: THREE.MeshStandardMaterial;
    };
};

type ActionName = 'standing';
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export default function Avatar({ ...props }: JSX.IntrinsicElements['group']) {
    const [zoom, setZoom] = useState(true);
    const group = useRef<THREE.Group>();
    const { nodes, materials, animations } = useGLTF('/avatar.gltf') as GLTFResult;
    const { actions } = useAnimations<GLTFActions>(animations, group);
    useEffect(() => {
        actions.standing.play();
    }, []);
    useFrame(({ clock, camera, v = new THREE.Vector3() }) => {
        group.current.rotation.y = 0.8 + Math.sin(clock.getElapsedTime()) / 11;
    });

    const toggleZoom = () => {
        setZoom(!zoom);
    };

    return (
        <group ref={group} {...props} dispose={null}>
            <group>
                <group name="Armature">
                    <Sparkles position={[0, 1, 0]} count={20} scale={1.75} size={2} speed={0.02} />
                    <primitive object={nodes.Hips} />
                    <skinnedMesh
                        castShadow
                        receiveShadow
                        geometry={nodes.Wolf3D_Body.geometry}
                        material={materials.Wolf3D_Body}
                        skeleton={nodes.Wolf3D_Body.skeleton}
                    />
                    <skinnedMesh
                        castShadow
                        receiveShadow
                        geometry={nodes.Wolf3D_Hair.geometry}
                        material={materials.Wolf3D_Hair}
                        skeleton={nodes.Wolf3D_Hair.skeleton}
                    />
                    <skinnedMesh
                        castShadow
                        receiveShadow
                        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
                        material={materials.Wolf3D_Outfit_Bottom}
                        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
                    />
                    <skinnedMesh
                        castShadow
                        receiveShadow
                        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
                        material={materials.Wolf3D_Outfit_Footwear}
                        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
                    />
                    <skinnedMesh
                        castShadow
                        receiveShadow
                        geometry={nodes.Wolf3D_Outfit_Top.geometry}
                        material={materials.Wolf3D_Outfit_Top}
                        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
                    />
                    <skinnedMesh
                        castShadow
                        receiveShadow
                        name="EyeLeft"
                        geometry={nodes.EyeLeft.geometry}
                        material={materials.Wolf3D_Eye}
                        skeleton={nodes.EyeLeft.skeleton}
                        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
                        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
                    />
                    <skinnedMesh
                        castShadow
                        receiveShadow
                        name="EyeRight"
                        geometry={nodes.EyeRight.geometry}
                        material={materials.Wolf3D_Eye}
                        skeleton={nodes.EyeRight.skeleton}
                        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
                        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
                    />
                    <skinnedMesh
                        castShadow
                        receiveShadow
                        name="Wolf3D_Head"
                        geometry={nodes.Wolf3D_Head.geometry}
                        material={materials.Wolf3D_Skin}
                        skeleton={nodes.Wolf3D_Head.skeleton}
                        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
                        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
                    />
                    <skinnedMesh
                        castShadow
                        receiveShadow
                        name="Wolf3D_Teeth"
                        geometry={nodes.Wolf3D_Teeth.geometry}
                        material={materials.Wolf3D_Teeth}
                        skeleton={nodes.Wolf3D_Teeth.skeleton}
                        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
                        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
                    />
                </group>
                <Lights />
            </group>
        </group>
    );
}

const Lights = () => {
    const groupL = useRef<THREE.Group>();
    const groupR = useRef<THREE.Group>();
    const front = useRef<THREE.Group>();

    useFrame(({ clock, mouse }) => {
        groupL.current.rotation.y = lerp(groupL.current.rotation.y, -mouse.x * (Math.PI / 2), 0.1);
        groupR.current.rotation.y = lerp(groupR.current.rotation.y, mouse.x * (Math.PI / 2), 0.1);
        front.current.position.x = lerp(front.current.position.x, mouse.x * 12, 0.4);
        front.current.position.y = lerp(front.current.position.y, 7 + mouse.y * 4, 0.4);
    });

    return (
        <>
            <group ref={groupL}>
                <pointLight position={[0, 7, -16]} distance={15} intensity={8} />
            </group>
            <group ref={groupR}>
                <pointLight position={[3, 4, -16]} distance={15} intensity={6} />
            </group>
            <pointLight position={[-3, 5, -2]} intensity={2} color={'#975BF4'} distance={10} />
            <spotLight
                castShadow
                ref={front}
                penumbra={0}
                angle={Math.PI / 3}
                position={[0, -1, 5]}
                distance={11}
                intensity={6}
                shadow-mapSize-width={2048}
                shadow-mapSize-height={2048}
            />
        </>
    );
};
useGLTF.preload('/avatar.gltf');
